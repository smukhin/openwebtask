declare namespace _default {
    /**
     * @this {XCUITestDriver}
     * @group Mobile Web Only
     */
    function setFrame(this: import("../driver").default, frame: any): Promise<void>;
    /**
     * @this {XCUITestDriver}
     * @group Mobile Web Only
     */
    function getCssProperty(this: import("../driver").default, propertyName: any, el: any): Promise<any>;
    /**
     * Submit the form an element is in
     *
     * @param {string|Element} el - the element ID
     * @group Mobile Web Only
     * @this {XCUITestDriver}
     */
    function submit(this: import("../driver").default, el: string | import("@appium/types").Element<string>): Promise<void>;
    /**
     * @this {XCUITestDriver}
     * @group Mobile Web Only
     */
    function refresh(this: import("../driver").default): Promise<void>;
    /**
     * @this {XCUITestDriver}
     * @group Mobile Web Only
     */
    function getUrl(this: import("../driver").default): Promise<any>;
    /**
     * @this {XCUITestDriver}
     * @group Mobile Web Only
     */
    function title(this: import("../driver").default): Promise<any>;
    /**
     * @this {XCUITestDriver}
     * @group Mobile Web Only
     */
    function getCookies(this: import("../driver").default): Promise<any>;
    /**
     * @this {XCUITestDriver}
     * @group Mobile Web Only
     */
    function setCookie(this: import("../driver").default, cookie: any): Promise<void>;
    /**
     * @this {XCUITestDriver}
     * @group Mobile Web Only
     */
    function deleteCookie(this: import("../driver").default, cookieName: any): Promise<void>;
    /**
     * @this {XCUITestDriver}
     * @group Mobile Web Only
     */
    function deleteCookies(this: import("../driver").default): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function findWebElementOrElements(this: import("../driver").default, strategy: any, selector: any, many: any, ctx: any): Promise<any>;
    /**
     * @this {XCUITestDriver}
     * @param {number} x
     * @param {number} y
     */
    function clickWebCoords(this: import("../driver").default, x: number, y: number): Promise<void>;
    /**
     * @this {XCUITestDriver}
     * @returns {Promise<boolean>}
     */
    function getSafariIsIphone(this: import("../driver").default): Promise<boolean>;
    /**
     * @this {XCUITestDriver}
     * @returns {Promise<import('@appium/types').Size>}
     */
    function getSafariDeviceSize(this: import("../driver").default): Promise<import("@appium/types").Size>;
    /**
     * @this {XCUITestDriver}
     * @returns {Promise<boolean>}
     */
    function getSafariIsNotched(this: import("../driver").default): Promise<boolean>;
    /**
     * @this {XCUITestDriver}
     */
    function getExtraTranslateWebCoordsOffset(this: import("../driver").default, wvPos: any, realDims: any): Promise<void>;
    /**
     * @this {XCUITestDriver}
     * @param {boolean} isIphone
     * @param {string} bannerVisibility
     * @returns {Promise<number>}
     */
    function getExtraNativeWebTapOffset(this: import("../driver").default, isIphone: boolean, bannerVisibility: string): Promise<number>;
    /**
     * @this {XCUITestDriver}
     * @param {any} el
     * @returns {Promise<void>}
     */
    function nativeWebTap(this: import("../driver").default, el: any): Promise<void>;
    /**
     * @this {XCUITestDriver}
     * @param {number} x
     * @param {number} y
     * @returns {Promise<import('@appium/types').Position>}
     */
    function translateWebCoords(this: import("../driver").default, x: number, y: number): Promise<import("@appium/types").Position>;
    /**
     * @this {XCUITestDriver}
     * @returns {Promise<boolean>}
     */
    function checkForAlert(this: import("../driver").default): Promise<boolean>;
    /**
     * @param {Promise<any>} promise
     * @this {XCUITestDriver}
     */
    function waitForAtom(this: import("../driver").default, promise: Promise<any>): Promise<any>;
    /**
     * @param {string} navType
     * @this {XCUITestDriver}
     */
    function mobileWebNav(this: import("../driver").default, navType: string): Promise<void>;
    /**
     * @this {XCUITestDriver}
     * @returns {string} The base url which could be used to access WDA HTTP endpoints
     * FROM THE SAME DEVICE where WDA is running
     */
    function getWdaLocalhostRoot(this: import("../driver").default): string;
    /**
     * Calibrates web to real coordinates translation.
     * This API can only be called from Safari web context.
     * It must load a custom page to the browser, and then restore
     * the original one, so don't call it if you can potentially
     * lose the current web app state.
     * The outcome of this API is then used in nativeWebTap mode.
     * The returned value could also be used to manually transform web coordinates
     * to real devices ones in client scripts.
     *
     * @this {XCUITestDriver}
     * @returns {Promise<import('../types').CalibrationData>}
     */
    function mobileCalibrateWebToRealCoordinatesTranslation(this: import("../driver").default): Promise<import("../types").CalibrationData>;
    /**
     * @typedef {Object} SafariOpts
     * @property {object} preferences An object containing Safari settings to be updated.
     * The list of available setting names and their values could be retrieved by
     * changing the corresponding Safari settings in the UI and then inspecting
     * 'Library/Preferences/com.apple.mobilesafari.plist' file inside of
     * com.apple.mobilesafari app container.
     * The full path to the Mobile Safari's container could be retrieved from
     * `xcrun simctl get_app_container <sim_udid> com.apple.mobilesafari data`
     * command output.
     * Use the `xcrun simctl spawn <sim_udid> defaults read <path_to_plist>` command
     * to print the plist content to the Terminal.
     */
    /**
     * Updates Mobile Safari preferences on an iOS Simulator
     *
     * @param {import('@appium/types').StringRecord} preferences - An object containing Safari settings to be updated.
     * The list of available setting names and their values can be retrieved by changing the
     * corresponding Safari settings in the UI and then inspecting
     * `Library/Preferences/com.apple.mobilesafari.plist` file inside of the `com.apple.mobilesafari`
     * app container within the simulator filesystem. The full path to Mobile Safari's container can
     * be retrieved by running `xcrun simctl get_app_container <sim_udid> com.apple.mobilesafari
     * data`. Use the `xcrun simctl spawn <sim_udid> defaults read <path_to_plist>` command to print
     * the plist content to the Terminal.
     *
     * @group Simulator Only
     * @returns {Promise<void>}
     * @throws {Error} if run on a real device or if the preferences argument is invalid
     * @this {XCUITestDriver}
     */
    function mobileUpdateSafariPreferences(this: import("../driver").default, preferences: import("@appium/types").StringRecord<any>): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function _deleteCookie(this: import("../driver").default, cookie: any): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function cacheWebElement(this: import("../driver").default, el: any): any;
    /**
     * @this {XCUITestDriver}
     */
    function cacheWebElements(this: import("../driver").default, response: any): any;
    /**
     * @param {string} atom
     * @param {unknown[]} args
     * @returns {Promise<any>}
     * @privateRemarks This should return `Promise<T>` where `T` extends `unknown`, but that's going to cause a lot of things to break.
     * @this {XCUITestDriver}
     */
    function executeAtom(this: import("../driver").default, atom: string, args: unknown[], alwaysDefaultFrame?: boolean): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function executeAtomAsync(this: import("../driver").default, atom: any, args: any, responseUrl: any): Promise<any>;
    /**
     * @template {string} S
     * @param {S|Element<S>} elOrId
     * @returns {import('./types').AtomsElement<S>}
     * @this {XCUITestDriver}
     */
    function getAtomsElement<S extends string>(this: import("../driver").default, elOrId: S | import("@appium/types").Element<S>): import("./types").AtomsElement<S>;
    /**
     * @param {readonly any[]} [args]
     * @this {XCUITestDriver}
     */
    function convertElementsForAtoms(this: import("../driver").default, args?: readonly any[] | undefined): any;
    function getElementId(element: any): any;
    /**
     * @param {any} element
     * @returns {element is Element}
     */
    function hasElementId(element: any): element is import("@appium/types").Element<string>;
}
export default _default;
export type XCUITestDriver = import('../driver').XCUITestDriver;
export type Rect = import('@appium/types').Rect;
export type Element<S extends string = string> = import('@appium/types').Element<S>;
//# sourceMappingURL=web.d.ts.map