"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const support_1 = require("@appium/support");
const teen_process_1 = require("teen_process");
const path_1 = __importDefault(require("path"));
const lodash_1 = __importDefault(require("lodash"));
const bluebird_1 = __importDefault(require("bluebird"));
const simulator_xcode_14_1 = __importDefault(require("./simulator-xcode-14"));
class SimulatorXcode15 extends simulator_xcode_14_1.default {
    /**
     * Collects and caches bundle indetifier of system Simulator apps
     *
     * @returns {Promise<Set<string>>}
     */
    async _fetchSystemAppBundleIds() {
        if (this._systemAppBundleIds) {
            return this._systemAppBundleIds;
        }
        const appsRoot = path_1.default.resolve(lodash_1.default.trim(await this.simctl.getEnv('IPHONE_SIMULATOR_ROOT')), 'Applications');
        const fetchBundleId = async (appRoot) => {
            const infoPlistPath = path_1.default.resolve(appRoot, 'Info.plist');
            try {
                const { stdout } = await (0, teen_process_1.exec)('/usr/libexec/PlistBuddy', [
                    '-c', 'print CFBundleIdentifier', infoPlistPath
                ]);
                return lodash_1.default.trim(stdout);
            }
            catch (ign) {
                return null;
            }
        };
        const allApps = (await support_1.fs.readdir(appsRoot))
            .filter((x) => x.endsWith('.app'))
            .map((x) => path_1.default.join(appsRoot, x));
        // @ts-ignore Typescript does not understand the below filter
        this._systemAppBundleIds = new Set(await bluebird_1.default.all(allApps.map(fetchBundleId).filter(Boolean)));
        return this._systemAppBundleIds;
    }
    /**
     * Verify whether the particular application is installed on Simulator.
     * @override
     *
     * @param {string} bundleId - The bundle id of the application to be checked.
     * @return {Promise<boolean>} True if the given application is installed.
     */
    async isAppInstalled(bundleId) {
        try {
            const appContainer = await this.simctl.getAppContainer(bundleId);
            return appContainer.endsWith('.app') && await support_1.fs.exists(appContainer);
        }
        catch (ign) {
            // get_app_container subcommand fails for system applications,
            // as well as the hidden appinfo command
            return (await this._fetchSystemAppBundleIds()).has(bundleId);
        }
    }
    /**
     * @override
     * @inheritdoc
     */
    async getLaunchDaemonsRoot() {
        return path_1.default.resolve(lodash_1.default.trim(await this.simctl.getEnv('IPHONE_SIMULATOR_ROOT')), 'System/Library/LaunchDaemons');
    }
}
exports.default = SimulatorXcode15;
//# sourceMappingURL=simulator-xcode-15.js.map