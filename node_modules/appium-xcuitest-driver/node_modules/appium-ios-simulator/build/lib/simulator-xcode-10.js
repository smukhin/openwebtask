"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const simulator_xcode_9_3_1 = __importDefault(require("./simulator-xcode-9.3"));
const support_1 = require("@appium/support");
const asyncbox_1 = require("asyncbox");
const utils_1 = require("./utils");
const logger_1 = __importDefault(require("./logger"));
class SimulatorXcode10 extends simulator_xcode_9_3_1.default {
    constructor(udid, xcodeVersion) {
        super(udid, xcodeVersion);
    }
    /**
     * Verify whether the particular application is installed on Simulator.
     *
     * @param {string} bundleId - The bundle id of the application to be checked.
     * @return {Promise<boolean>} True if the given application is installed.
     */
    async isAppInstalled(bundleId) {
        try {
            const appContainer = await this.simctl.getAppContainer(bundleId);
            if (!appContainer.endsWith('.app')) {
                return false;
            }
            return await support_1.fs.exists(appContainer);
        }
        catch (err) {
            // get_app_container subcommand fails for system applications,
            // so we try the hidden appinfo subcommand, which prints correct info for
            // system/hidden apps
            try {
                const info = await this.simctl.appInfo(bundleId);
                return info.includes('ApplicationType');
            }
            catch (ign) { }
        }
        return false;
    }
    /**
     * @param {string} url
     */
    async openUrl(url) {
        if (!await this.isRunning()) {
            throw new Error(`Tried to open '${url}', but Simulator is not in Booted state`);
        }
        const timer = new support_1.timing.Timer().start();
        await this.simctl.openUrl(url);
        /** @type {Error|undefined|null} */
        let psError;
        try {
            await (0, asyncbox_1.waitForCondition)(async () => {
                let procList = [];
                try {
                    procList = await this.ps();
                    psError = null;
                }
                catch (e) {
                    logger_1.default.debug(e.message);
                    psError = e;
                }
                return procList.some(({ name }) => name === utils_1.MOBILE_SAFARI_BUNDLE_ID);
            }, {
                waitMs: utils_1.SAFARI_STARTUP_TIMEOUT_MS,
                intervalMs: 500,
            });
        }
        catch (err) {
            const secondsElapsed = timer.getDuration().asSeconds;
            if (psError) {
                logger_1.default.warn(`Mobile Safari process existence cannot be verified after ${secondsElapsed.toFixed(3)}s. ` +
                    `Original error: ${psError.message}`);
                logger_1.default.warn('Continuing anyway');
            }
            else {
                throw new Error(`Mobile Safari cannot open '${url}' after ${secondsElapsed.toFixed(3)}s. ` +
                    `Its process ${utils_1.MOBILE_SAFARI_BUNDLE_ID} does not exist in the list of Simulator processes`);
            }
        }
        logger_1.default.debug(`Safari successfully opened '${url}' in ${timer.getDuration().asSeconds.toFixed(3)}s`);
    }
}
exports.default = SimulatorXcode10;
//# sourceMappingURL=simulator-xcode-10.js.map