export default extensions;
export type LaunchAppOpts = {
    /**
     * [false] Whether to wait until the app has fully started and
     * is present in processes list
     */
    wait: boolean;
    /**
     * [10000] The number of milliseconds to wait until
     * the app is fully started. Only applicatble if `wait` is true.
     */
    timeoutMs: number;
};
declare namespace extensions {
    /**
     * Install valid .app package on Simulator.
     *
     * @param {string} app - The path to the .app package.
     */
    function installApp(app: string): Promise<any>;
    /**
     * Returns user installed bundle ids which has 'bundleName' in their Info.Plist as 'CFBundleName'
     *
     * @param {string} bundleName - The bundle name of the application to be checked.
     * @return {Promise<string[]>} - The list of bundle ids which have 'bundleName'
     */
    function getUserInstalledBundleIdsByBundleName(bundleName: string): Promise<string[]>;
    /**
     * Verify whether the particular application is installed on Simulator.
     *
     * @param {string} bundleId - The bundle id of the application to be checked.
     * @return {Promise<boolean>} True if the given application is installed.
     */
    function isAppInstalled(bundleId: string): Promise<boolean>;
    /**
     * Uninstall the given application from the current Simulator.
     *
     * @param {string} bundleId - The buindle ID of the application to be removed.
     */
    function removeApp(bundleId: string): Promise<void>;
    /**
     * @typedef {Object} LaunchAppOpts
     * @property {boolean} wait [false] Whether to wait until the app has fully started and
     * is present in processes list
     * @property {number} timeoutMs [10000] The number of milliseconds to wait until
     * the app is fully started. Only applicatble if `wait` is true.
     */
    /**
     * Starts the given application on Simulator
     *
     * @param {string} bundleId - The buindle ID of the application to be launched
     * @param {Partial<LaunchAppOpts>} opts
     */
    function launchApp(bundleId: string, opts?: Partial<LaunchAppOpts>): Promise<void>;
    /**
     * Stops the given application on  Simulator.
     *
     * @param {string} bundleId - The buindle ID of the application to be stopped
     */
    function terminateApp(bundleId: string): Promise<void>;
    /**
     * Check if app with the given identifier is running.
     *
     * @param {string} bundleId - The buindle ID of the application to be checked.
     */
    function isAppRunning(bundleId: string): Promise<any>;
    /**
     * Scrub (delete the preferences and changed files) the particular application on Simulator.
     * The app will be terminated automatically if it is running.
     *
     * @param {string} bundleId - Bundle identifier of the application.
     * @throws {Error} if the given app is not installed.
     */
    function scrubApp(bundleId: string): Promise<void>;
}
//# sourceMappingURL=applications.d.ts.map