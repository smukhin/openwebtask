"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const defaults_utils_1 = require("../defaults-utils");
const bluebird_1 = __importDefault(require("bluebird"));
const extensions = {};
/**
 * Updates Reduce Motion setting state.
 *
 * @param {boolean} reduceMotion Whether to enable or disable the setting.
 */
extensions.setReduceMotion = async function setReduceMotion(reduceMotion) {
    return await this.updateSettings('com.apple.Accessibility', {
        ReduceMotionEnabled: Number(reduceMotion)
    });
};
/**
 * Updates Reduce Transparency setting state.
 *
 * @param {boolean} reduceTransparency Whether to enable or disable the setting.
 */
extensions.setReduceTransparency = async function setReduceTransparency(reduceTransparency) {
    return await this.updateSettings('com.apple.Accessibility', {
        EnhancedBackgroundContrastEnabled: Number(reduceTransparency)
    });
};
/**
 * Allows to update Simulator preferences in runtime.
 *
 * @param {string} domain The name of preferences domain to be updated,
 * for example, 'com.apple.Preferences' or 'com.apple.Accessibility' or
 * full path to a plist file on the local file system.
 * @param {object} updates Mapping of keys/values to be updated
 * @returns {Promise<boolean>} True if settings were actually changed
 */
extensions.updateSettings = async function updateSettings(domain, updates) {
    if (lodash_1.default.isEmpty(updates)) {
        return false;
    }
    const argChunks = (0, defaults_utils_1.generateDefaultsCommandArgs)(updates);
    await bluebird_1.default.all(argChunks.map((args) => this.simctl.spawnProcess([
        'defaults', 'write', domain, ...args
    ])));
    return true;
};
/**
 * Sets UI appearance style.
 * This function can only be called on a booted simulator.
 *
 * @since Xcode SDK 11.4
 */
extensions.setAppearance = async function setAppearance( /* value */) {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to set UI appearance`);
};
/**
 * Gets the current UI appearance style
 * This function can only be called on a booted simulator.
 *
 * @since Xcode SDK 11.4
 */
extensions.getAppearance = async function getAppearance() {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to get UI appearance`);
};
// eslint-disable-next-line require-await
extensions.configureLocalization = async function configureLocalization() {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to configure the Simulator locale`);
};
/**
 * Updates Auto Fill Passwords setting state.
 *
 * @param {boolean} isEnabled Whether to enable or disable the setting.
 */
extensions.setAutoFillPasswords = async function setAutoFillPasswords(isEnabled) {
    return await this.updateSettings('com.apple.WebUI', {
        AutoFillPasswords: Number(isEnabled)
    });
};
exports.default = extensions;
//# sourceMappingURL=settings.js.map