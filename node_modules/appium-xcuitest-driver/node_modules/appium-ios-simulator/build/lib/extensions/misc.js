"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../logger"));
const extensions = {};
/**
 * Perform Shake gesture on Simulator window.
 */
extensions.shake = async function shake() {
    logger_1.default.info(`Performing shake gesture on ${this.udid} Simulator`);
    await this.simctl.spawnProcess([
        'notifyutil',
        '-p', 'com.apple.UIKit.SimulatorShake'
    ]);
};
/**
 * Adds the given certificate into the Trusted Root Store on the simulator.
 * The simulator must be shut down in order for this method to work properly.
 *
 * @param {string} payload the content of the PEM certificate
 * @returns {Promise<boolean>} `true` if the certificate has been successfully installed
 * or `false` if it has already been there
 */
// eslint-disable-next-line require-await
extensions.addCertificate = async function addCertificate(payload) {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old add certificates`);
};
/**
 * Simulates push notification delivery
 *
 * @since Xcode SDK 11.4
 */
// eslint-disable-next-line require-await
extensions.pushNotification = async function pushNotification( /* payload */) {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to push notifications`);
};
exports.default = extensions;
//# sourceMappingURL=misc.js.map