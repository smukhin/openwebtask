export default extensions;
declare namespace extensions {
    /**
     * Resolve full path to Simlator's LaunchDaemons root folder
     *
     * @returns {Promise<string>} Full path to Simlator's LaunchDaemons root folder
     */
    function getLaunchDaemonsRoot(): Promise<string>;
    /**
     * Create the backup of keychains folder.
     * The previously created backup will be automatically
     * deleted if this method was called twice in a row without
     * `restoreKeychains` being invoked.
     *
     * @this {import('../simulator-xcode-14').default}
     * @returns {Promise<boolean>} True if the backup operation was successfull.
     */
    function backupKeychains(this: import("../simulator-xcode-14").default): Promise<boolean>;
    /**
     * Restore the previsouly created keychains backup.
     *
     * @param {string[]} excludePatterns - The list
     * of file name patterns to be excluded from restore. The format
     * of each item should be the same as '-x' option format for
     * 'unzip' utility. This can also be a comma-separated string,
     * which is going be transformed into a list automatically,
     * for example: '*.db*,blabla.sqlite'
     * @this {import('../simulator-xcode-14').default}
     * @returns {Promise<boolean>} If the restore opration was successful.
     * @throws {Error} If there is no keychains backup available for restore.
     */
    function restoreKeychains(this: import("../simulator-xcode-14").default, excludePatterns?: string[]): Promise<boolean>;
    /**
     * Clears Keychains for the particular simulator in runtime (there is no need to stop it).
     *
     * @this {import('../simulator-xcode-14').default}
     * @throws {Error} If keychain cleanup has failed.
     */
    function clearKeychains(this: import("../simulator-xcode-14").default): Promise<void>;
}
//# sourceMappingURL=keychain.d.ts.map