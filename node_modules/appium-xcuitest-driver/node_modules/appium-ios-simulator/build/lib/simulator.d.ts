export type SimulatorLookupOptions = {
    /**
     * [iOS] - The name of the simulator platform
     */
    platform: string | null;
    /**
     * [true] - Set it to `false` in order to
     * skip simulator existence verification
     */
    checkExistence: boolean | null;
    /**
     * - The full path to the devices set where
     * the current simulator is located. `null` value means that the default path is
     * used, which is usually `~/Library/Developer/CoreSimulator/Devices`
     */
    devicesSetPath: string | null;
};
/**
 * @typedef {Object} SimulatorLookupOptions
 * @property {?string} platform [iOS] - The name of the simulator platform
 * @property {?boolean} checkExistence [true] - Set it to `false` in order to
 * skip simulator existence verification
 * @property {?string} devicesSetPath - The full path to the devices set where
 * the current simulator is located. `null` value means that the default path is
 * used, which is usually `~/Library/Developer/CoreSimulator/Devices`
 */
/**
 * Finds and returns the corresponding Simulator instance for the given ID.
 *
 * @param {string} udid - The ID of an existing Simulator.
 * @param {Partial<SimulatorLookupOptions>} opts
 * @throws {Error} If the Simulator with given udid does not exist in devices list.
 *   If you want to create a new simulator, you can use the `createDevice()` method of
 *   [node-simctl](github.com/appium/node-simctl).
 * @return {Promise<any>} Simulator object associated with the udid passed in.
 */
export function getSimulator(udid: string, opts?: Partial<SimulatorLookupOptions>): Promise<any>;
//# sourceMappingURL=simulator.d.ts.map