"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSimulator = void 0;
const simulator_xcode_8_1 = __importDefault(require("./simulator-xcode-8"));
const simulator_xcode_9_1 = __importDefault(require("./simulator-xcode-9"));
const simulator_xcode_9_3_1 = __importDefault(require("./simulator-xcode-9.3"));
const simulator_xcode_10_1 = __importDefault(require("./simulator-xcode-10"));
const simulator_xcode_11_1 = __importDefault(require("./simulator-xcode-11"));
const simulator_xcode_11_4_1 = __importDefault(require("./simulator-xcode-11.4"));
const simulator_xcode_14_1 = __importDefault(require("./simulator-xcode-14"));
const simulator_xcode_15_1 = __importDefault(require("./simulator-xcode-15"));
const utils_1 = require("./utils");
const appium_xcode_1 = __importDefault(require("appium-xcode"));
const logger_1 = require("./logger");
const MIN_SUPPORTED_XCODE_VERSION = 8;
function handleUnsupportedXcode(xcodeVersion) {
    if (xcodeVersion.major < MIN_SUPPORTED_XCODE_VERSION) {
        throw new Error(`Tried to use an iOS simulator with xcode version ${xcodeVersion.versionString} but only Xcode version ` +
            `${MIN_SUPPORTED_XCODE_VERSION} and up are supported`);
    }
    return xcodeVersion;
}
/**
 * @typedef {Object} SimulatorLookupOptions
 * @property {?string} platform [iOS] - The name of the simulator platform
 * @property {?boolean} checkExistence [true] - Set it to `false` in order to
 * skip simulator existence verification
 * @property {?string} devicesSetPath - The full path to the devices set where
 * the current simulator is located. `null` value means that the default path is
 * used, which is usually `~/Library/Developer/CoreSimulator/Devices`
 */
/**
 * Finds and returns the corresponding Simulator instance for the given ID.
 *
 * @param {string} udid - The ID of an existing Simulator.
 * @param {Partial<SimulatorLookupOptions>} opts
 * @throws {Error} If the Simulator with given udid does not exist in devices list.
 *   If you want to create a new simulator, you can use the `createDevice()` method of
 *   [node-simctl](github.com/appium/node-simctl).
 * @return {Promise<any>} Simulator object associated with the udid passed in.
 */
async function getSimulator(udid, opts = {}) {
    let { platform = 'iOS', checkExistence = true, devicesSetPath, } = opts;
    const xcodeVersion = handleUnsupportedXcode(await appium_xcode_1.default.getVersion(true));
    if (checkExistence) {
        const simulatorInfo = await (0, utils_1.getSimulatorInfo)(udid, {
            devicesSetPath
        });
        if (!simulatorInfo) {
            throw new Error(`No sim found with udid '${udid}'`);
        }
        platform = simulatorInfo.platform;
    }
    // make sure we have the right logging prefix
    (0, logger_1.setLoggingPlatform)(platform);
    logger_1.log.info(`Constructing ${platform} simulator for Xcode version ${xcodeVersion.versionString} with udid '${udid}'`);
    let SimClass;
    switch (xcodeVersion.major) {
        case 8:
            SimClass = simulator_xcode_8_1.default;
            break;
        case 9:
            SimClass = xcodeVersion.minor < 3 ? simulator_xcode_9_1.default : simulator_xcode_9_3_1.default;
            break;
        case 10:
            SimClass = simulator_xcode_10_1.default;
            break;
        case 11:
            SimClass = xcodeVersion.minor < 4 ? simulator_xcode_11_1.default : simulator_xcode_11_4_1.default;
            break;
        case 12:
        case 13:
            SimClass = simulator_xcode_11_4_1.default;
            break;
        case 14:
            SimClass = simulator_xcode_14_1.default;
            break;
        case 15:
        default:
            SimClass = simulator_xcode_15_1.default;
            break;
    }
    const result = new SimClass(udid, xcodeVersion);
    if (devicesSetPath) {
        result.devicesSetPath = devicesSetPath;
    }
    return result;
}
exports.getSimulator = getSimulator;
//# sourceMappingURL=simulator.js.map