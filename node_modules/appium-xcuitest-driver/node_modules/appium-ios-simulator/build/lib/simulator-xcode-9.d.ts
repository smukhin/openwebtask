export default SimulatorXcode9;
declare class SimulatorXcode9 extends SimulatorXcode8 {
    constructor(udid: any, xcodeVersion: any);
    /**
     * @typedef {Object} DevicePreferences
     * @property {?number} SimulatorExternalDisplay - TBD. Example value: 2.114
     * @property {?string} ChromeTint - TBD. Example value: ''
     * @property {?number} SimulatorWindowLastScale - Scale value for the particular Simulator window.
     *                                                1.0 means 100% scale.
     * @property {?string} SimulatorWindowOrientation - Simulator window orientation. Possible values are:
     *                                                  'Portrait', 'LandscapeLeft', 'PortraitUpsideDown' and 'LandscapeRight'.
     * @property {?number} SimulatorWindowRotationAngle - Window rotation angle. This value is expected to be in sync
     *                                                    with _SimulatorWindowOrientation_. The corresponding values are:
     *                                                    0, 90, 180 and 270.
     * @property {?string} SimulatorWindowCenter - The coordinates of Simulator's window center in pixels,
     *                                             for example '{-1294.5, 775.5}'.
     * @property {?boolean} ConnectHardwareKeyboard - Equals to 1 if hardware keyboard should be connected.
     *                                                Otherwise 0.
     */
    /**
     * @typedef {Object} CommonPreferences
     * @property {boolean} ConnectHardwareKeyboard - Whether to connect hardware keyboard
     */
    /**
     * @typedef {Object} RunOptions
     * @property {string} scaleFactor: Any positive float value. 1.0 means 1:1 scale.
     * Defines the window scale value for the UI client window for the current Simulator.
     * Equals to `null` by default, which keeps the current scale unchanged.
     * @property {boolean} connectHardwareKeyboard: whether to connect the hardware keyboard to the
     * Simulator UI client. Equals to `false` by default.
     * @property {number} startupTimeout: number of milliseconds to wait until Simulator booting
     * process is completed. The default timeout will be used if not set explicitly.
     * @property {boolean} isHeadless: whether to start the Simulator in headless mode (with UI
     * client invisible). `false` by default.
     * @property {?boolean} tracePointer [false] - Whether to highlight touches on Simulator
     * screen. This is helpful while debugging automated tests or while observing the automation
     * recordings.
     * @property {string} pasteboardAutomaticSync ['off'] - Whether to disable pasteboard sync with the
     * Simulator UI client or respect the system wide preference. 'on', 'off', or 'system' is available.
     * The sync increases launching simulator process time, but it allows system to sync pasteboard
     * with simulators. Follows system-wide preference if the value is 'system'.
     * Defaults to 'off'.
     * @property {DevicePreferences} devicePreferences: preferences of the newly created Simulator
     * device
     */
    /**
     * Executes given Simulator with options. The Simulator will not be restarted if
     * it is already running and the current UI state matches to `isHeadless` option.
     * @override
     *
     * @param {Partial<RunOptions>} opts - One or more of available Simulator options
     */
    override run(opts?: Partial<{
        /**
         * : Any positive float value. 1.0 means 1:1 scale.
         * Defines the window scale value for the UI client window for the current Simulator.
         * Equals to `null` by default, which keeps the current scale unchanged.
         */
        scaleFactor: string;
        /**
         * : whether to connect the hardware keyboard to the
         * Simulator UI client. Equals to `false` by default.
         */
        connectHardwareKeyboard: boolean;
        /**
         * : number of milliseconds to wait until Simulator booting
         * process is completed. The default timeout will be used if not set explicitly.
         */
        startupTimeout: number;
        /**
         * : whether to start the Simulator in headless mode (with UI
         * client invisible). `false` by default.
         */
        isHeadless: boolean;
        /**
         * [false] - Whether to highlight touches on Simulator
         * screen. This is helpful while debugging automated tests or while observing the automation
         * recordings.
         */
        tracePointer: boolean | null;
        /**
         * ['off'] - Whether to disable pasteboard sync with the
         * Simulator UI client or respect the system wide preference. 'on', 'off', or 'system' is available.
         * The sync increases launching simulator process time, but it allows system to sync pasteboard
         * with simulators. Follows system-wide preference if the value is 'system'.
         * Defaults to 'off'.
         */
        pasteboardAutomaticSync: string;
        /**
         * : preferences of the newly created Simulator
         * device
         */
        devicePreferences: {
            /**
             * - TBD. Example value: 2.114
             */
            SimulatorExternalDisplay: number | null;
            /**
             * - TBD. Example value: ''
             */
            ChromeTint: string | null;
            /**
             * - Scale value for the particular Simulator window.
             *   1.0 means 100% scale.
             */
            SimulatorWindowLastScale: number | null;
            /**
             * - Simulator window orientation. Possible values are:
             *   'Portrait', 'LandscapeLeft', 'PortraitUpsideDown' and 'LandscapeRight'.
             */
            SimulatorWindowOrientation: string | null;
            /**
             * - Window rotation angle. This value is expected to be in sync
             *   with _SimulatorWindowOrientation_. The corresponding values are:
             *   0, 90, 180 and 270.
             */
            SimulatorWindowRotationAngle: number | null;
            /**
             * - The coordinates of Simulator's window center in pixels,
             *   for example '{-1294.5, 775.5}'.
             */
            SimulatorWindowCenter: string | null;
            /**
             * - Equals to 1 if hardware keyboard should be connected.
             *   Otherwise 0.
             */
            ConnectHardwareKeyboard: boolean | null;
        };
    }>): Promise<void>;
    /**
     * @override
     */
    override startUIClient(opts?: {}): Promise<void>;
    /**
     * Disable keyboard tutorial as 'com.apple.keyboard.preferences' domain via 'defaults' command.
     */
    disableKeyboardIntroduction(): Promise<void>;
    /***
     * Boots simulator and opens simulators UI Client if not already opened.
     *
     * @param {boolean} isUiClientRunning - process id of simulator UI client.
     * @param {Partial<RunOptions>} opts - arguments to start simulator UI client with.
     */
    launchWindow(isUiClientRunning: boolean, opts?: Partial<{
        /**
         * : Any positive float value. 1.0 means 1:1 scale.
         * Defines the window scale value for the UI client window for the current Simulator.
         * Equals to `null` by default, which keeps the current scale unchanged.
         */
        scaleFactor: string;
        /**
         * : whether to connect the hardware keyboard to the
         * Simulator UI client. Equals to `false` by default.
         */
        connectHardwareKeyboard: boolean;
        /**
         * : number of milliseconds to wait until Simulator booting
         * process is completed. The default timeout will be used if not set explicitly.
         */
        startupTimeout: number;
        /**
         * : whether to start the Simulator in headless mode (with UI
         * client invisible). `false` by default.
         */
        isHeadless: boolean;
        /**
         * [false] - Whether to highlight touches on Simulator
         * screen. This is helpful while debugging automated tests or while observing the automation
         * recordings.
         */
        tracePointer: boolean | null;
        /**
         * ['off'] - Whether to disable pasteboard sync with the
         * Simulator UI client or respect the system wide preference. 'on', 'off', or 'system' is available.
         * The sync increases launching simulator process time, but it allows system to sync pasteboard
         * with simulators. Follows system-wide preference if the value is 'system'.
         * Defaults to 'off'.
         */
        pasteboardAutomaticSync: string;
        /**
         * : preferences of the newly created Simulator
         * device
         */
        devicePreferences: {
            /**
             * - TBD. Example value: 2.114
             */
            SimulatorExternalDisplay: number | null;
            /**
             * - TBD. Example value: ''
             */
            ChromeTint: string | null;
            /**
             * - Scale value for the particular Simulator window.
             *   1.0 means 100% scale.
             */
            SimulatorWindowLastScale: number | null;
            /**
             * - Simulator window orientation. Possible values are:
             *   'Portrait', 'LandscapeLeft', 'PortraitUpsideDown' and 'LandscapeRight'.
             */
            SimulatorWindowOrientation: string | null;
            /**
             * - Window rotation angle. This value is expected to be in sync
             *   with _SimulatorWindowOrientation_. The corresponding values are:
             *   0, 90, 180 and 270.
             */
            SimulatorWindowRotationAngle: number | null;
            /**
             * - The coordinates of Simulator's window center in pixels,
             *   for example '{-1294.5, 775.5}'.
             */
            SimulatorWindowCenter: string | null;
            /**
             * - Equals to 1 if hardware keyboard should be connected.
             *   Otherwise 0.
             */
            ConnectHardwareKeyboard: boolean | null;
        };
    }>): Promise<void>;
    /**
     * Boots Simulator if not already booted.
     * Does nothing if it is already running.
     * This API does NOT wait until Simulator is fully booted.
     *
     * @throws {Error} If there was a failure while booting the Simulator.
     */
    boot(): Promise<void>;
    /**
     * Perform verification of device preferences correctness.
     *
     * @param {Partial<DevicePreferences>} prefs [{}] - The preferences to be verified
     * @throws {Error} If any of the given preference values does not match the expected
     * format.
     */
    verifyDevicePreferences(prefs?: Partial<{
        /**
         * - TBD. Example value: 2.114
         */
        SimulatorExternalDisplay: number | null;
        /**
         * - TBD. Example value: ''
         */
        ChromeTint: string | null;
        /**
         * - Scale value for the particular Simulator window.
         *   1.0 means 100% scale.
         */
        SimulatorWindowLastScale: number | null;
        /**
         * - Simulator window orientation. Possible values are:
         *   'Portrait', 'LandscapeLeft', 'PortraitUpsideDown' and 'LandscapeRight'.
         */
        SimulatorWindowOrientation: string | null;
        /**
         * - Window rotation angle. This value is expected to be in sync
         *   with _SimulatorWindowOrientation_. The corresponding values are:
         *   0, 90, 180 and 270.
         */
        SimulatorWindowRotationAngle: number | null;
        /**
         * - The coordinates of Simulator's window center in pixels,
         *   for example '{-1294.5, 775.5}'.
         */
        SimulatorWindowCenter: string | null;
        /**
         * - Equals to 1 if hardware keyboard should be connected.
         *   Otherwise 0.
         */
        ConnectHardwareKeyboard: boolean | null;
    }>): void;
    /**
     * Update the common iOS Simulator preferences file with new values.
     * It is necessary to restart the corresponding Simulator before
     * these changes are applied.
     *
     * @param {Partial<DevicePreferences>} devicePrefs [{}] - The mapping, which represents new device preference values
     * for the given Simulator.
     * @param {Partial<CommonPreferences>} commonPrefs [{}] - The mapping, which represents new common preference values
     * for all Simulators.
     * @return {Promise<boolean>} True if the preferences were successfully updated.
     */
    updatePreferences(devicePrefs?: Partial<{
        /**
         * - TBD. Example value: 2.114
         */
        SimulatorExternalDisplay: number | null;
        /**
         * - TBD. Example value: ''
         */
        ChromeTint: string | null;
        /**
         * - Scale value for the particular Simulator window.
         *   1.0 means 100% scale.
         */
        SimulatorWindowLastScale: number | null;
        /**
         * - Simulator window orientation. Possible values are:
         *   'Portrait', 'LandscapeLeft', 'PortraitUpsideDown' and 'LandscapeRight'.
         */
        SimulatorWindowOrientation: string | null;
        /**
         * - Window rotation angle. This value is expected to be in sync
         *   with _SimulatorWindowOrientation_. The corresponding values are:
         *   0, 90, 180 and 270.
         */
        SimulatorWindowRotationAngle: number | null;
        /**
         * - The coordinates of Simulator's window center in pixels,
         *   for example '{-1294.5, 775.5}'.
         */
        SimulatorWindowCenter: string | null;
        /**
         * - Equals to 1 if hardware keyboard should be connected.
         *   Otherwise 0.
         */
        ConnectHardwareKeyboard: boolean | null;
    }>, commonPrefs?: Partial<{
        /**
         * - Whether to connect hardware keyboard
         */
        ConnectHardwareKeyboard: boolean;
    }>): Promise<boolean>;
    /**
     * @returns {Promise<boolean>}
     */
    isBiometricEnrolled(): Promise<boolean>;
    /**
     *
     * @param {boolean} isEnabled
     */
    enrollBiometric(isEnabled?: boolean): Promise<void>;
    /**
     * Sends a notification to match/not match the particular biometric.
     *
     * @param {boolean} shouldMatch [true] - Set it to true or false in order to emulate
     * matching/not matching the corresponding biometric
     * @param {string} biometricName [touchId] - Either touchId or faceId (faceId is only available since iOS 11)
     */
    sendBiometricMatch(shouldMatch?: boolean, biometricName?: string): Promise<void>;
    /**
     * @returns {Promise<string>}
     */
    getLaunchDaemonsRoot(): Promise<string>;
    /**
     * @typedef {Object} KeyboardOptions
     * @property {string} name The name of the keyboard locale, for example `en_US` or `de_CH`
     * @property {string} layout The keyboard layout, for example `QUERTY` or `Ukrainian`
     * @property {string?} hardware Could either be `Automatic` or `null`
     */
    /**
     * @typedef {Object} LanguageOptions
     * @property {string} name The name of the language, for example `de` or `zh-Hant-CN`
     * @property {boolean} [skipSyncUiDialogTranslation] no Simulator services will be reset if this option is set to true.
     *                                                   See https://github.com/appium/appium/issues/19440 for more details
     */
    /**
     * @typedef {Object} LocaleOptions
     * @property {string} name The name of the system locale, for example `de_CH` or `zh_CN`
     * @property {string} calendar Optional calendar format, for example `gregorian` or `persian`
     */
    /**
     * @typedef {Object} LocalizationOptions
     * @property {KeyboardOptions} keyboard
     * @property {LanguageOptions} language
     * @property {LocaleOptions} locale
     */
    /**
     * Change localization settings on the currently booted simulator
     *
     * @param {Partial<LocalizationOptions>} opts
     * @throws {Error} If there was a failure while setting the preferences
     * @returns {Promise<boolean>} `true` if any of settings has been successfully changed
     */
    configureLocalization(opts?: Partial<{
        keyboard: {
            /**
             * The name of the keyboard locale, for example `en_US` or `de_CH`
             */
            name: string;
            /**
             * The keyboard layout, for example `QUERTY` or `Ukrainian`
             */
            layout: string;
            /**
             * Could either be `Automatic` or `null`
             */
            hardware: string | null;
        };
        language: {
            /**
             * The name of the language, for example `de` or `zh-Hant-CN`
             */
            name: string;
            /**
             * no Simulator services will be reset if this option is set to true.
             *  See https://github.com/appium/appium/issues/19440 for more details
             */
            skipSyncUiDialogTranslation?: boolean | undefined;
        };
        locale: {
            /**
             * The name of the system locale, for example `de_CH` or `zh_CN`
             */
            name: string;
            /**
             * Optional calendar format, for example `gregorian` or `persian`
             */
            calendar: string;
        };
    }>): Promise<boolean>;
}
import SimulatorXcode8 from './simulator-xcode-8';
//# sourceMappingURL=simulator-xcode-9.d.ts.map